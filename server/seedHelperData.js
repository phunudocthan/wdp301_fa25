const mongoose = require("mongoose");
const Theme = require("./models/Theme");
const AgeRange = require("./models/AgeRange");
const Difficulty = require("./models/Difficulty");
require("dotenv").config();

// Sample data
const themesData = [
  {
    name: "City",
    description: "Th√†nh ph·ªë hi·ªán ƒë·∫°i v·ªõi c√°c t√≤a nh√† v√† ph∆∞∆°ng ti·ªán",
  },
  {
    name: "Star Wars",
    description: "V≈© tr·ª• Star Wars v·ªõi c√°c nh√¢n v·∫≠t v√† phi thuy·ªÅn",
  },
  {
    name: "Creator",
    description: "B·ªô s∆∞u t·∫≠p s√°ng t·∫°o v·ªõi nhi·ªÅu m√¥ h√¨nh ƒëa d·∫°ng",
  },
  { name: "Technic", description: "M√¥ h√¨nh k·ªπ thu·∫≠t cao v·ªõi c∆° ch·∫ø ph·ª©c t·∫°p" },
  {
    name: "Friends",
    description: "Th·∫ø gi·ªõi c·ªßa nh·ªØng ng∆∞·ªùi b·∫°n v·ªõi nhi·ªÅu ho·∫°t ƒë·ªông",
  },
  {
    name: "Ninjago",
    description: "Th·∫ø gi·ªõi ninja v·ªõi c√°c tr·∫≠n chi·∫øn h√†nh ƒë·ªông",
  },
  { name: "Architecture", description: "Ki·∫øn tr√∫c n·ªïi ti·∫øng th·∫ø gi·ªõi" },
  { name: "Harry Potter", description: "Th·∫ø gi·ªõi ph√π th·ªßy Harry Potter" },
];

const ageRangesData = [
  { rangeLabel: "4-6 tu·ªïi", minAge: 4, maxAge: 6 },
  { rangeLabel: "6-8 tu·ªïi", minAge: 6, maxAge: 8 },
  { rangeLabel: "8-12 tu·ªïi", minAge: 8, maxAge: 12 },
  { rangeLabel: "12-16 tu·ªïi", minAge: 12, maxAge: 16 },
  { rangeLabel: "16+ tu·ªïi", minAge: 16, maxAge: 99 },
];

const difficultiesData = [
  { label: "D·ªÖ", level: 1 },
  { label: "Trung b√¨nh", level: 2 },
  { label: "Kh√≥", level: 3 },
  { label: "R·∫•t kh√≥", level: 4 },
  { label: "Chuy√™n gia", level: 5 },
];

async function seedHelperData() {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      dbName: process.env.DB_NAME || "lego_ecommerce",
    });
    console.log("Connected to MongoDB");

    // Check and seed Themes
    const themeCount = await Theme.countDocuments();
    if (themeCount === 0) {
      await Theme.insertMany(themesData);
      console.log("‚úÖ Themes seeded successfully");
    } else {
      console.log(`üì¶ ${themeCount} themes already exist`);
    }

    // Check and seed Age Ranges
    const ageRangeCount = await AgeRange.countDocuments();
    if (ageRangeCount === 0) {
      await AgeRange.insertMany(ageRangesData);
      console.log("‚úÖ Age ranges seeded successfully");
    } else {
      console.log(`üì¶ ${ageRangeCount} age ranges already exist`);
    }

    // Check and seed Difficulties
    const difficultyCount = await Difficulty.countDocuments();
    if (difficultyCount === 0) {
      await Difficulty.insertMany(difficultiesData);
      console.log("‚úÖ Difficulties seeded successfully");
    } else {
      console.log(`üì¶ ${difficultyCount} difficulties already exist`);
    }

    console.log("üéâ Helper data seeding completed");

    // Display current data
    const themes = await Theme.find();
    const ageRanges = await AgeRange.find();
    const difficulties = await Difficulty.find();

    console.log("\nüìä Current Data:");
    console.log(
      "Themes:",
      themes.map((t) => t.name)
    );
    console.log(
      "Age Ranges:",
      ageRanges.map((a) => a.rangeLabel)
    );
    console.log(
      "Difficulties:",
      difficulties.map((d) => `${d.label} (${d.level})`)
    );
  } catch (error) {
    console.error("‚ùå Error seeding helper data:", error);
  } finally {
    await mongoose.disconnect();
    console.log("Disconnected from MongoDB");
  }
}

if (require.main === module) {
  seedHelperData();
}

module.exports = { seedHelperData };
